<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" horizontalGap="0"
	creationComplete="init()"  mouseOver="over()" mouseOut="out()" click="clickHandler(event)"
	horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingRight="4" paddingLeft="0"
	implements="mx.controls.listClasses.IDropInListItemRenderer, mx.core.IFontContextComponent">
	
	<mx:Script>
		<![CDATA[
			import flash.display.DisplayObject;
			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import global.GlobalString;
			import mx.collections.ArrayCollection;
			import mx.controls.List;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.listClasses.ListBaseContentHolder;
			import mx.core.Application;
			import mx.core.IFlexModuleFactory;
			import mx.core.IToolTip;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			import popup.InputSelectionEvent;
			import popup.OpenResources;
			
			[Bindable]
			private var _list:List;
			
			private var tooltipInstance:IToolTip;
			
			private function init():void
			{
				addEventListener(MouseEvent.ROLL_OVER, mouseOverHandler);
				addEventListener(MouseEvent.ROLL_OUT, mouseOutHandler);
				
				if (listData && listData.owner) {
					_list = listData.owner as List;
					_list.addEventListener(MouseEvent.CLICK, selectionChangeHandler);
				}
			}
			
			private function clickHandler(e:MouseEvent):void {
				if (data.hasOwnProperty("label")){
					
					var match:Boolean = false;
					
					for each (var str:String in GlobalString.getStrings()) {
						match = match || data.label.toString() == str;
					}
					
					if (match) {
						e.stopImmediatePropagation();
					}
				}
			}
			
			private function over():void {
				if (data.hasOwnProperty("uris") && arrayToString(data.uris) != null && arrayToString(data.uris) != "") {
					var pos:Point = contentToGlobal(new Point(x, y));
					tooltipInstance = ToolTipManager.createToolTip(arrayToString(data.uris), pos.x + width, pos.y - y);
				}
			}
			
			private var _listData:BaseListData;
			
			[Bindable("dataChange")]
			[Inspectable(environment="none")]
			public function get listData():BaseListData
			{
				return _listData;
			}
			
			public function set listData(value:BaseListData):void
			{
				_listData = value;
				if (listData && listData.owner && listData.owner is List) {
					_list = listData.owner as List;
					_list.addEventListener(MouseEvent.CLICK, selectionChangeHandler);
				}
				
			}
			
			private function selectionChangeHandler(event:MouseEvent):void {
				//setStyle("backgroundColor", getColor(mouseOver));
			}
			
			public function get fontContext():IFlexModuleFactory
			{
				return moduleFactory;
			}
			
			public function set fontContext(moduleFactory:IFlexModuleFactory):void
			{
				this.moduleFactory = moduleFactory;
			}
			
			private var la:LoadingAnimation;
			
			private var _data:Object;
			
			[Bindable("dataChange")]
			override public function get data():Object {
				return _data;
			}
			
			override public function set data(value:Object):void 
			{
				_data = value;
				
				dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				dispatchEvent(new Event("showButton"));
				
				if (value != null && value.hasOwnProperty("label") && value.label == GlobalString.SEARCHING) {
					
					if (la == null) {
						la = new LoadingAnimation();
						la.circleRadius = 7;
						la.numberOfDots = 8;
						la.dotSize = 2;
						la.startRotation();
						
						addChildAt(la, 0);
					}
					
				}else {
					if (la != null) {
						removeChild(la);
						la.stopRotation();
						la = null;
					}
				}
			}
			
			private function arrayToString(arr:Array):String {
				var output:String = "";
				for each(var entry:String in arr) {
					output += entry + "\n";
				}
				return output;
			}
			
			private function out():void {
				if (tooltipInstance) {
					try {
						ToolTipManager.destroyToolTip(tooltipInstance);
					}catch (e:ArgumentError) {
						trace(e);
					}
				}
			}
			
			private var mouseOver:Boolean = false;
			
			private function mouseOverHandler(event:Event):void {
				mouseOver = true;
				//setStyle("backgroundColor", getColor(mouseOver));
				dispatchEvent(new Event("showButton"));
			}
			
			private function mouseOutHandler(event:Event):void {
				mouseOver = false;
				//setStyle("backgroundColor", getColor(mouseOver));
				dispatchEvent(new Event("showButton"));
			}
			
			private function getColor(mouseOver:Boolean):* {
				
				if (data == _list.selectedItem) {
					return _list.getStyle("selectionColor");
				}
				
				if (mouseOver) {
					return _list.getStyle("rollOverColor");
				}else {
					return _list.getStyle("backgroundColor");
				}
			}
			
			[Bindable(event="showButton")]
			private function showButton():Boolean {
				return mouseOver && data.hasOwnProperty('uris');
			}
			
			public function defaultDropDownLabelFunction( item:Object ):String
			{
				var label:String = item.label;
				
				var str:String = "";
				var searchStr:String = (parent.parent.parent.parent.parent as Object).textInput.text;
				
				var start:int = label.search(new RegExp(searchStr, "gi"));
				
				if (start < 0) {
					return label;
				}
				
				str = label.substring(0, start);
				str = str + "<b><u>" + label.substr(start, searchStr.length) + "</u></b>";
				str = str + label.substr(start + searchStr.length, label.length);
    			
    			return str;
			}
			
			[Bindable(event="showButton")]
			private function calcWidth():Number {
				return width - ( (showButton()) ? openResourceButton.width + 2 : 0 ) - 10;
			}
			
			private function openResource():void{
				
				var uris:Array = data.uris as Array;
				
				if (uris.length == 1) {
					var newLink:URLRequest = new URLRequest(uris[0].toString());
					navigateToURL(newLink,"_blank");
				}else {
					var res:OpenResources = PopUpManager.createPopUp(Application.application as DisplayObject, OpenResources, true) as OpenResources;
					res.title = data.label;
					res.dataProvider = new ArrayCollection(uris);
				}
				
				
			}
			
		]]>
	</mx:Script>
	
	<mx:Label id="rendererLabel" width="{calcWidth()}" height="100%" truncateToFit="true" htmlText="{ defaultDropDownLabelFunction( data ) }" />
	<mx:Button id="openResourceButton" toolTip="Open resource in browser" icon="@Embed(source='../../assets/img/16-globe.png')"
		width="20" height="20" paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0"
		skin="positionedTabNavigator.skins.BorderlessButtonSkin" visible="{showButton()}" click="openResource()" />
</mx:HBox>
