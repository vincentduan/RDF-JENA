<?xml version="1.0" encoding="utf-8"?>
<mx:Box
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hc="com.hillelcoren.components.autoComplete.classes.*"
	clipContent="false" width="250" initialize="init()" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="mx.controls.listClasses.IDropInListItemRenderer,mx.managers.IFocusManagerComponent">
	
	<mx:Metadata>
		/**
		 * Dispatched when an item is selected or de-selelcted
		 */
		[Event(name="change")]
		/**
		 * Dispatched when the text in the search field is changed
		 */
		[Event(name="searchChange")]
		
		/**
		 * Dispatched when the selected item in search field is clicked
		 */
		[Event(name="itemClick")]
		
		[Event(name="mouseOverSelectedItem")]
		
		[Event(name="mouseOutSelectedItem")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;
			import com.hillelcoren.components.autoComplete.interfaces.IBrowser;
			import mx.events.MoveEvent;
			import mx.utils.StringUtil;
			import mx.controls.TextInput;
			import flash.utils.getQualifiedClassName;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.dataGridClasses.DataGridListData;
			import com.hillelcoren.components.autoComplete.classes.*;
			import com.hillelcoren.utils.StringUtils;
			import mx.controls.LinkButton;
			import mx.core.IFlexDisplayObject;
			import mx.core.Application;
			import mx.containers.GridRow;
			import mx.controls.Label;
			import mx.utils.ObjectUtil;
			import mx.controls.scrollClasses.ScrollBar;
			import mx.effects.Glow;
			import mx.effects.Effect;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.binding.utils.BindingUtils;
			import mx.controls.List;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.controls.Button;
			import mx.effects.DefaultListEffect;
			import mx.collections.ArrayCollection;
			
			private var _prompt:String;
			private var _promptChanged:Boolean;
			
			private var _isBrowseable:Boolean;
			private var _isBrowseableChanged:Boolean;
			private var _browseButton:Button;
			
			private var _isMultiSelect:Boolean;
			private var _isMultiSelectChanged:Boolean;
			private var _multiSelectLayout:String = LAYOUT_VERTICAL;
			private var _multiSelectLayoutChanged:Boolean;
			private var _multiSelect:MultiSelect;
			
			private var _isStrict:Boolean;
			private var _isStrictChanged:Boolean;
			
			private var _style:String;
			private var _styleChanged:Boolean;
			
			private var _enableRemoveIcon:Boolean;
			private var _enableRemoveIconChanged:Boolean;
			
			private var _browser:IBrowser;
			private var _useListBuilder:Boolean;
			private var _browserFields:Array;
			protected var _browserClass:Class = Browser;
			protected var _listBuilderClass:Class = ListBuilder;
			
			private var _browseLabel:String = "Browse";
			private var _removeLabel:String = "Remove";	
			
			[Bindable]			
			private var _dataProvider:ArrayCollection;
			private var _dataProviderChanged:Boolean;
			
			private var _text:String;
			private var _textChanged:Boolean;
			
			private var _widthChanged:Boolean;
			private var _percentWidthChanged:Boolean;
			
			[Bindable]
			private var _selectedItems:ArrayCollection = new ArrayCollection();
			private var _selectedItemsChanged:Boolean;
			private var _initialSelectedItems:ArrayCollection;
			
			private var _selectedItem:Object;
			private var _selectedItemChanged:Boolean;
			
			protected var _selectedItemId:Number;
			private var _selectedItemIdChanged:Boolean;
			
			private var _isOrderable:Boolean;
			private var _isOrderableChanged:Boolean;
								
			private var _filterFunction:Function;
			private var _filterFunctionChanged:Boolean;
			private var _matchType:String = MATCH_BEGINNING;
			
			private var _isEqualFunction:Function;
			
			private var _labelField:String;
			private var _labelFieldChange:Boolean;
			
			private var _labelFunction:Function;
			private var _labelFunctionChanged:Boolean;
			
			private var _dropDownLabelFunction:Function;
			private var _dropDownLabelFunctionChanged:Boolean;
			
			private var _dropDownItemRenderer:IFactory;
			private var _dropDownItemRendererChanged:Boolean;
			
			private var _backspaceAction:String
			private var _backspaceActionChanged:Boolean;
			
			private var _allowDuplicates:Boolean;
			private var _allowDuplicatesChanged:Boolean;
			
			private var _areNewItemsEditable:Boolean;
			private var _areNewItemsEditableChanged:Boolean;
			
			private var _browserItemRenderer:IFactory;
			
			private var _keyField:String = "id";
			private var _listData:DataGridListData;
			
			public static const SEARCH_CHANGE:String = "searchChange";
			
			public static const STYLE_UNDERLINE:String 	= "underline";
			public static const STYLE_MAC_MAIL:String 	= "macMail";
			public static const STYLE_FACEBOOK:String 	= "facebook";
			
			public static const MATCH_BEGINNING:String 	= "beginning";
			public static const MATCH_WORD:String		= "word";
			public static const MATCH_ANY_PART:String	= "anyPart";
			
			public static const LAYOUT_VERTICAL:String 		= "vertical";
			public static const LAYOUT_HORIZONTAL:String 	= "horizontal";
			
			public static const BACKSPACE_FOCUS:String 	= "focus";
			public static const BACKSPACE_REMOVE:String = "remove";
			
			private function init():void
			{
				addEventListener( FocusEvent.MOUSE_FOCUS_CHANGE, handleMouseFocusChange );
				addEventListener( MoveEvent.MOVE, handleMove );
				
				combo.selectedItems = _selectedItems;
				combo.addEventListener( Event.CHANGE, handleComboChange );
				combo.addEventListener( SEARCH_CHANGE, handleComboSearchChange );
				
				_selectedItems.addEventListener( CollectionEvent.COLLECTION_CHANGE, handleSelectedItemsChange );
				
				if (_filterFunction == null)
				{
					filterFunction = defaultFilterFunction;
				}
				
				if (_labelFunction == null)
				{
					labelFunction = defaultLabelFunction;
				}
				
				if (_dropDownLabelFunction == null)
				{			
					dropDownLabelFunction = defaultDropDownLabelFunction;
				}								
			}
			
			// check if the focus has moved to the dropdown (otherwise, if we use the 
			// component as an editor in the datagrid the focus out event will destroy
			// the editorInstance before the value gets set 
			private function handleMouseFocusChange( event:FocusEvent ):void
			{
				if (combo.isDropDownVisible())
				{
					if (event.relatedObject && combo.dropDown.contains( event.relatedObject ))
					{
						event.preventDefault();
					}
				}				
			}
			
			private function handleMove( event:MoveEvent ):void
			{
				combo.positionDropDown();
			}
									
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				var item:Object;
				
				if (_textChanged)
				{
					_textChanged = false;
					
					combo.addItem( null );
					combo.text = _text;
				}	
				
				if (_promptChanged)
				{
					_promptChanged = false;				
					combo.prompt = _prompt;
				}
				
				if (_isBrowseableChanged)
				{
					_isBrowseableChanged = false;
					showBrowseButton( _isBrowseable );
				}
				
				if (_isOrderableChanged)
				{
					_isOrderableChanged = false;
					showOrderingButtons( _isOrderable );
				}
				
				if (_backspaceActionChanged)
				{
					_backspaceActionChanged = false;
					combo.backspaceAction = _backspaceAction;
				}
				
				if (_isStrictChanged)
				{
					_isStrictChanged = false;
					combo.isStrict = _isStrict;
				}
				
				if (_widthChanged)
				{
					_widthChanged = false;
					combo.width = width;
				}
				
				if (_percentWidthChanged)
				{
					_percentWidthChanged = false;
					combo.percentWidth = percentWidth;
				}
				
				if (_styleChanged)
				{
					_styleChanged = false;
					combo.style = _style;
				}
				
				if (_enableRemoveIconChanged)
				{
					_enableRemoveIconChanged = false;
					combo.enableRemoveIcon = _enableRemoveIcon;
				}
				
				if (_allowDuplicatesChanged)
				{
					_allowDuplicatesChanged = false;
					combo.allowDuplicates = _allowDuplicates;
				}
				
				if (_areNewItemsEditableChanged)
				{
					_areNewItemsEditableChanged = false;
					combo.areNewItemsEditable = _areNewItemsEditable;
				}
				
				
				if (_isMultiSelectChanged || _multiSelectLayoutChanged)
				{
					_selectedItems.removeAll();
						
					if (_isMultiSelectChanged)
					{
						combo.isMultiSelect = _isMultiSelect;
					}
					
					if (_multiSelectLayoutChanged)
					{	
						combo.multiSelectLayout = _multiSelectLayout;
					}
					
					_isMultiSelectChanged = false;
					_multiSelectLayoutChanged = false;
					
					var showMultiSelect:Boolean = (_multiSelectLayout == LAYOUT_VERTICAL && _isMultiSelect);
					showMultiSelectList( showMultiSelect );																			
				}
				
				if (_dropDownLabelFunctionChanged)
				{
					_dropDownLabelFunctionChanged = false;					
					combo.dropDownLabelFunction = _dropDownLabelFunction;
				}
				
				if (_dropDownItemRendererChanged)
				{
					_dropDownItemRendererChanged = false;
					combo.dropDownItemRenderer = _dropDownItemRenderer;
				}
				
				if (_labelFunctionChanged)
				{
					_labelFunctionChanged = false;				
					combo.labelFunction = labelFunction;
				}
				
				if (_filterFunctionChanged)
				{
					_filterFunctionChanged = false;					
					combo.filterFunction = _filterFunction;
				}
				
				if (_dataProviderChanged && _dataProvider)
				{
					_dataProviderChanged = false;
					
					_dataProvider.addEventListener( CollectionEvent.COLLECTION_CHANGE, handleDataProviderChange, false, 0, true );
					_dataProvider.refresh();
					
					combo.dataProvider = _dataProvider;
					combo.dataProvider.refresh();
					combo.validateNow();
				}		
				
				if (_selectedItemChanged && _dataProvider)
				{
					_selectedItemChanged = false;
					_selectedItems.removeAll();
					
					if (_selectedItem)
					{
						_selectedItems.addItem( _selectedItem );
					}
				}
				
				if (_selectedItemIdChanged && _dataProvider)
				{
					_selectedItemIdChanged = false;
					_selectedItems.removeAll();
					
					for each (item in _dataProvider.source)
					{
						if (item.hasOwnProperty( _keyField ) && item[ _keyField ] == _selectedItemId)
						{
							_selectedItems.addItem( item );
							_selectedItemId = 0;
							break;
						}
					}
				}
								
				if (_selectedItemsChanged && _dataProvider)
				{
					_selectedItemsChanged = false;
					_selectedItems.removeAll();
					
					for each (var selectedItem:Object in _initialSelectedItems)
					{
						var foundItem:Object = null;
						
						for each (item in _dataProvider.source)
						{
							if (item == selectedItem)
							{
								foundItem = item;
							}
							else if (item.hasOwnProperty( _keyField ) && item[_keyField] == selectedItem[_keyField])
							{
								foundItem = item;
							}
							
							if (foundItem)
							{
								_selectedItems.addItem( foundItem );
								combo.validateNow();
								foundItem = true;
								break;
							}
						}
						
						if (foundItem == null)
						{
							_selectedItems.addItem( selectedItem );
							combo.validateNow();							
						}
					}
				}
			}
			
			public function get listData():BaseListData
            {
            	return _listData;
            }
			
            public function set listData( value:BaseListData ):void
            {
            	combo.enableClearIcon = false;
            	
            	_listData = DataGridListData( value );            	
            } 
            
            override public function set data( value:Object ):void
            {
                super.data = value;
				
				if (!data || !data[ _listData.dataField ])
				{
					return;
				}
				
				callLater( _setData );
            }
            
            private function _setData():void
            {
            	var value:Object = data[ _listData.dataField ];
            	
            	if (value is Array)
            	{
            		selectedItems = new ArrayCollection( value as Array );            			
            	}
            	else if (value is ArrayCollection)
            	{
            		selectedItems = value as ArrayCollection;
            	}
            	else
            	{
            		selectedItem = value;
            	}            	
            }
			
			private function showBrowseButton( show:Boolean ):void
			{
				if (show && _browseButton == null)
				{
					_browseButton = new Button();
					_browseButton.label = _browseLabel;
					_browseButton.width = Consts.BUTTON_WIDTH;
					_browseButton.addEventListener( MouseEvent.CLICK, handleBrowseClick );
				}
				
				if (show)
				{
					browseGridItem.addChild( _browseButton );
					grid.setStyle( "horizontalGap", 5 );
				}
				else if ( _browseButton != null )
				{
					browseGridItem.removeChild( _browseButton );
				}
			}
			
			private function showOrderingButtons( show:Boolean ):void
			{
				if (!_multiSelect)
				{
					return;
				}
				
				_multiSelect.isOrderable = show;
			}
			
			private function showMultiSelectList( show:Boolean ):void
			{
				if (show && _multiSelect == null)
				{
					_multiSelect = new MultiSelect();
					_multiSelect.labelFunction = _labelFunction;
					_multiSelect.addEventListener( Event.CHANGE, handleMultiSelectChange );
					_multiSelect.dataProvider = _selectedItems;					
					_multiSelect.isOrderable = _isOrderable;
					_multiSelect.removeLabel = _removeLabel;
				}
				
				if (show)
				{
					grid.addChildAt( _multiSelect, 0 );
					grid.setStyle( "horizontalGap", 5 );
					
					_selectedItems.removeAll();
				}
				else if (_multiSelect && _multiSelect.parent)
				{
					grid.removeChild( _multiSelect );
				}											
			}
			
			private function handleMultiSelectChange( event:Event ):void
			{
				dispatchEvent( event );
			}
			
			private function handleBrowseClick( event:Event ):void
			{
				if (!_dataProvider)
				{
					return;
				}
				
				var useListBuilder:Boolean = _useListBuilder && _isMultiSelect;
				
				if (useListBuilder)
				{
					_browser = new _listBuilderClass();	
					ListBuilder( _browser ).isOrderable = _isOrderable;
				}
				else
				{
					_browser = new _browserClass();
					Browser( _browser ).browserFields = _browserFields;
					Browser( _browser ).isMultiSelect = _isMultiSelect;					
				}
				
				var dp:ArrayCollection = new ArrayCollection( _dataProvider.source );
				dp.sort = _dataProvider.sort;
				dp.refresh();
				
				_browser.dataProvider = dp;
				_browser.filterFunction = _filterFunction;
				_browser.title = "Browse";
				_browser.labelFunction = _labelFunction;
				_browser.addEventListener( Event.CHANGE, handleBrowserChange );
				
				if (_isMultiSelect || useListBuilder)
				{
					_browser.originalSelectedItems = _selectedItems;
				}
							
				PopUpManager.addPopUp( IFlexDisplayObject( _browser ), DisplayObject( Application.application), true );
				PopUpManager.centerPopUp( IFlexDisplayObject( _browser ) );
				
				_browser.init();
				
				if (!useListBuilder && !combo.isItemSelected)
				{
					Browser( _browser ).searchStr = searchText;
				}													
			}
			
			private function handleDataProviderChange( event:CollectionEvent ):void
			{
				if (event.kind == CollectionEventKind.REMOVE)
				{
					for each (var item:Object in event.items)
					{
						var index:int = _selectedItems.getItemIndex( item );
						
						if (index >= 0)
						{
							_selectedItems.removeItemAt( index );
						}
					}
				}
			}
			
			private function handleSelectedItemsChange( event:CollectionEvent ):void
			{
				
				var item:Object;
				
				if (event.kind == CollectionEventKind.REMOVE)
				{
					if (!_isMultiSelect || _multiSelectLayout == LAYOUT_HORIZONTAL)
					{
						combo.removeItemAt( event.location );
					}					
				}
				else if (event.kind == CollectionEventKind.RESET)
				{
					combo.removeAll();
				}	
				else if (event.kind == CollectionEventKind.ADD)
				{					
					searchText = null;
					combo.hideDropDown();
					
					if (!_isMultiSelect || _multiSelectLayout == LAYOUT_HORIZONTAL)
					{
						for each (item in event.items)
						{
							if (!_allowDuplicates)
							{
								if (checkIfDuplicate( item ))
								{
									continue;
								}
							}
							
							combo.addItem( item );																	
						}
					}					
				}
								
				var changeEvent:Event = new Event( Event.CHANGE );
				dispatchEvent( changeEvent );
			}
			
			private function checkIfDuplicate( searchFor:Object ):Boolean
			{
				var count:int;
				
				for each (var item:Object in _selectedItems)
				{
					if (item == searchFor)
					{
						count++;
					}
				} 
				
				if (count > 1)
				{
					_selectedItems.removeEventListener( CollectionEvent.COLLECTION_CHANGE, handleSelectedItemsChange );
					
					var index:int = _selectedItems.getItemIndex( item );
					_selectedItems.removeItemAt( index );
					
					_selectedItems.addEventListener( CollectionEvent.COLLECTION_CHANGE, handleSelectedItemsChange );
										
					return true;
				}
				
				return false;
			}
				
			/**
			 * This will cause the component to research the dataProvider and display the popUp if 
			 * there are any matches. This is useful when using a dynamic dataProvider. Simply call
			 * this function once the data has been returned from the server
			 */
			public function search():void
			{
				validateNow();
				combo.handleChange( null );
			}
			
			private function handleComboChange( event:Event ):void
			{
				dispatchEvent( event );
			}
			
			private function handleComboSearchChange( event:Event ):void
			{
				dispatchEvent( event );
			}
			
			private function handleBrowserChange( event:Event ):void
			{
				var item:Object;
				
				if (useListBuilder || !_isMultiSelect)
				{
					_selectedItems.removeAll();				
				}
				
				for each (item in _browser.selectedItems)
				{
					_selectedItems.addItem( item );				
				}					
				
				PopUpManager.removePopUp( IFlexDisplayObject( _browser ) );
				
				if (_isMultiSelect && _multiSelectLayout == LAYOUT_HORIZONTAL)
				{
					searchText = null;
				}
				
				combo.setFocus();
				dispatchEvent( new Event( Event.CHANGE ) );
			}
			
			[Inspectable(enumeration="false,true")]
			public function set isMultiSelect( value:Boolean ):void
			{
				_isMultiSelect = value;
				_isMultiSelectChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="horizontal,vertical")]
			/**
			 * When isMultiSelect is set to true, this specifies whether to layout the selected
			 * items horizontally (in a flow layout) or vertically (in a List).
			 * @default horizontal
			 */
			public function set multiSelectLayout( value:String ):void
			{
				_multiSelectLayout = value;
				_multiSelectLayoutChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			/**
			 * A flag that indicates whether or not to display the browse button.
			 * Clicking the browse button will show either a DataGrid or a List (depending
			 * on whether the dataProvider contains Objects or Strings). It useListBuilder
			 * is enabled an alternate List Builder browser will be displayed
			 * @default false
			 */
			public function set isBrowseable( value:Boolean ):void
			{
				_isBrowseable = value;
				_isBrowseableChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			/**
			 * A flag that indicates whether or not we display the ordering buttons and allow the 
			 * items to be drag-and-drop reorderd. This is only enabled when isMultiSelect is
			 * set to true and the multiSelectLayout property is set to AutoComplete.LAYOUT_VERTICAL
			 */
			public function set isOrderable( value:Boolean ):void
			{
				_isOrderable = value;
				_isOrderableChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			public function set useListBuilder( value:Boolean ):void
			{
				_useListBuilder = value;
			}
			
			/**
			 * If this is set to true, when the user clicks the Browse button we'll  
			 * display the List Builder (rather than a DataGrid or List). <p> 
			 * The List Builder contains two lists next to each other. The user can add/remove 
			 * items by selecting them and clicking the move left/move right buttons or by
			 * drag and dropping the items betweent the lists
			 * @default false
			 */
			public function get useListBuilder():Boolean
			{
				return _useListBuilder;
			}
			
			/**
			 * A flag that indicates whether or not you can select multiple values.
			 */
		    public function get isMultiSelect():Boolean
			{
				return _isMultiSelect;
			}
			
			public function set dataProvider( value:ArrayCollection ):void
			{
				if (_dataProvider != null)
				{
					_dataProvider.removeEventListener( CollectionEvent.COLLECTION_CHANGE, handleDataProviderChange );
				}
					
				_dataProvider = value;
				_dataProviderChanged = true;
				
				invalidateProperties();
			}
			
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;	
			}
			
			/**
			 * A function that the view will use to eliminate items that do not match the function's criteria.
			 */ 
			public function set filterFunction( value:Function ):void
			{
				_filterFunction = value;
				_filterFunctionChanged = true;
				
				invalidateProperties();
			}	
			
			[Inspectable(enumeration="beginning,word,anyPart")]
			/**
			 * Specifies the how to compare the item to the search string when checking for a match.
			 * Note, setting a value for the filterFunction property will override this property.
			 * @default beginning
			 */
			public function set matchType( value:String ):void
			{
				_matchType = value;
			}
			
			/**
			 * The id of the initially selected item.
			 */
			public function set selectedItemId( value:Number ):void
			{
				_selectedItemId = value;
				_selectedItemIdChanged = true;
				
				invalidateProperties();
			}
			
			/**
			 * Checks if the component is in the process of resolving the selecteItemId to it's respective object.
			 */
			public function isSettingValue():Boolean
			{
				return _selectedItemId > 0;
			}
			
			/**
			 * An array of references to the selected items in the data provider.
			 */
			public function set selectedItems( value:ArrayCollection ):void
			{
				_initialSelectedItems = value;
				_selectedItemsChanged = true;
				
				invalidateProperties();
			}
			
			/**
			 * A reference to the selected item in the data provider.
			 */
			public function set selectedItem( value:Object ):void
			{
				_selectedItem = value;
				_selectedItemChanged = true;
				
				invalidateProperties();
			}
			
			[Bindable(event="change")]
			public function get selectedItems():ArrayCollection
			{
				return _selectedItems;
			}
			
			[Bindable(event="change")]
			public function get selectedItem():*
			{
				if (_selectedItems.length > 0)
				{
					return _selectedItems.getItemAt( _selectedItems.length - 1 );					
				}
				else
				{
					return null;
				}
			}
			
			/**
			 * Checks if an item is selected
			 */
			public function isItemSelected( item:Object ):Boolean
			{
				return _selectedItems.getItemIndex( item ) >= 0;
			}
			
			public function get browserClass():Class
			{
				return _browserClass;
			}
			
			public function set browserClass( value:Class ):void
			{
				_browserClass = value;
			}
			
			[Inspectable(enumeration="true,false")]
			/**
			 * A flag that indicates whether or not you can select values which aren't in the dataProvider
			 * @default true
			 */
			public function set isStrict( value:Boolean ):void
			{
				_isStrict = value;
				_isStrictChanged = true;
				
				invalidateProperties();
			}
			
			[Bindable(event="change")]
			public function get text():String
			{
				var str:String = "";
				
				for each (var item:Object in _selectedItems)
				{
					str += _labelFunction( item ) + ", ";
				}
				
				str = str.substring( 0, str.length - 2);
				
				return str; 
			}
			
			/**
			 * The value of the text in the search field
			 */
			public function set text( value:String ):void
			{
				_text = value;
				_textChanged = true;
				
				invalidateProperties();
			}
			
			/**
			 * The prompt to display before the component receives focus
			 */
			public function set prompt( value:String ):void
			{
				_prompt = value;
				_promptChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="macMail,facebook,underline")]
			/**
			 * Specifies which style to use when displaying the selected items.
			 * @default macMail
			 */
			public function set style( value:String ):void
			{
				_style = value;
				_styleChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="true,false")]
			/**
			 * A flag that indicates whether or not to display the remove icon in the selected items.
			 * @default false
			 */
			public function set enableRemoveIcon( value:Boolean ):void
			{
				_enableRemoveIcon = value;
				_enableRemoveIconChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="true,false")]
			/**
			 * A flag that indicates whether or not you can select duplicate items when multiselect mode is enabled
			 * @default false
			 */
			public function set allowDuplicates( value:Boolean ):void
			{
				_allowDuplicates = value;
				_allowDuplicatesChanged = true;
				 
				 invalidateProperties();
			}
			
			/**
			 * A flag that indicates whether or not you can edit a new item which has been added. This only affects
			 * the component when isStrict is set to false
			 */
			public function set areNewItemsEditable( value:Boolean ):void
			{
				_areNewItemsEditable = value;
				_areNewItemsEditableChanged = true;
				 
				 invalidateProperties();
			}
			
			override public function setFocus():void
			{
				combo.setFocus();
			}
			
			/**
			 * The name of the field in the data provider items to display as the label.
			 */
			public function set labelField( value:String ):void
			{
				_labelField = value;
				_labelFieldChange = true;
				
				invalidateProperties();
			}
			
			/**
			 * A user-supplied function to run on each item to determine its label.
			 */
			public function set labelFunction( value:Function ):void
			{
				_labelFunction = value;
				_labelFunctionChanged = true;
				
				invalidateProperties();
			}
			
			public function set dropDownLabelFunction( value:Function ):void
			{
				_dropDownLabelFunction = value;
				_dropDownLabelFunctionChanged = true;
				
				invalidateProperties();
			}
			
			/**
			 * The fields/columns to display in the browse window. If listBuilder is enable
			 * this property is ignored.
			 */
			public function set browserFields( value:Array ):void
			{
				_browserFields = value;
			}
			
			/**
			 * The custom item renderer for the dropdown displayed when searching.
			 */
			public function set dropDownItemRenderer( value:IFactory ):void
			{
				_dropDownItemRenderer = value;
				_dropDownItemRendererChanged = true;
				
				invalidateProperties();
			}
			
			[Bindable(event="searchChange")]
			/**
			 * Returns the search string.
			 */
			public function get searchText():String
			{
				return combo.searchText ? combo.searchText : "";
			}
			
			public function set searchText( value:String ):void
			{
				combo.searchText = value;
				
				var event:Event = new Event( SEARCH_CHANGE );
				dispatchEvent( event );				
			}
			
			private function defaultFilterFunction( item:Object, searchStr:String ):Boolean
			{
				var str:String = labelFunction( item );
				
				switch (_matchType)
				{
					case MATCH_ANY_PART:
						return (new RegExp(searchStr, "gi")).test( str );
					case MATCH_BEGINNING:
						return StringUtils.beginsWith( str, searchStr );
					case MATCH_WORD:
						return StringUtils.anyWordBeginsWith( str, searchStr );
				}
				
				return false;
			}
			
			private function defaultLabelFunction( item:Object ):String
			{
				if (_labelField && item.hasOwnProperty( _labelField ))
				{
					return item[ _labelField ];
				}
				else
				{
					return item.toString();
				}
			}
			
			/**
			 * The default function used to determine the text to display in the dropdown when searching.
			 * It will try to find the part of the item which matched the search string and highlight
			 * it by making bold and underlined
			 */
			public function defaultDropDownLabelFunction( item:Object ):String
			{
				var label:String = _labelFunction( item );
				
				var str:String = "";
				var searchStr:String = combo.searchText;
				
				var start:int = label.search(new RegExp(searchStr, "gi"));
				
				if (start < 0) {
					return label;
				}
				
				// we need to make sure if we're matching whole words that we don't 
				// highlight a part of a word which matches. ie, if the string is
				// "Test String" and the user searches for "st" we need to highlight
				// the "st" in "String" (not "Test")
				if (_matchType == MATCH_WORD && start > 0)
				{
					if (label.charAt( start - 1 ) != " ")
					{
						start = label.search(new RegExp(" " + searchStr, "gi")) + 1;
					}
				}
				
				str = label.substring(0, start);
				str = str + "<b><u>" + label.substr(start, searchStr.length) + "</u></b>";
				str = str + label.substr(start + searchStr.length, label.length);
				
				if (isItemSelected( item ))
    			{
    				str = "<font color='" + Consts.COLOR_TEXT_DISABLED + "'>" + str + "</font>";
    			}
    			
    			return str;
			}
						
			public function get labelFunction():Function
			{
				return _labelFunction;
			}
			
			/**
			 * This field is used in conjuction with the selectedItems or selectedItemId property to 
			 * determine if the item matches.
			 * @default id
			 */
			public function set keyField( value:String ):void
			{
				_keyField = value;
			}
			
			/**
			 * A function which controls whether or not to automatically select the item if it's the
			 * only match. By default, it's just a case-insensitive string comparison. 
			 */
			public function set isEqualFunction( value:Function ):void
			{
				_isEqualFunction = value;
				combo.isEqualFunction = value;
			}
			
			/**
			 * Returns the next available (un-selected) item in the data provider
			 */ 
			public function getNextItem():*
			{
				combo.filterData();
				
				if (combo.dataProvider.length > 0)
				{
					return combo.dataProvider.getItemAt( 0 );
				}
				else
				{
					return null;
				}
			}
			
			/**
			 * The text value for the label the browse button. 
			 * @default Browse
			 */
			public function set browseLabel( value:String ):void
			{
				_browseLabel = value;
			}
			
			override public function set width( value:Number ):void
			{
				super.width = value;
				_widthChanged = true;
				
				invalidateProperties();
			}
			
			override public function set percentWidth( value:Number ):void
			{
				super.percentWidth = value;
				_percentWidthChanged = true;
				
				invalidateProperties();
			}
			
			
			/**
			 * The text value for the label the remove button.
			 * @default Remove
			 */
			public function set removeLabel( value:String ):void
			{
				_removeLabel = value;
			}
			
			[Inspectable(enumeration="focus,remove")]
			/**
			 * The action to take when pressing backspace when the cursor is in front of a selected item.
			 * @default focus 
			 */
			public function set backspaceAction( value:String ):void
			{
				_backspaceAction = value;
				_backspaceActionChanged = true;
				
				invalidateProperties();
			}
			
		]]>
	</mx:Script>
	
	<mx:Grid id="grid" width="100%" horizontalGap="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:GridRow width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:GridItem id="comboGridItem" width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<hc:Combo id="combo" width="100%" height="100%"/>									
			</mx:GridItem>
			<mx:GridItem id="browseGridItem"/>	
		</mx:GridRow>
	</mx:Grid>
	
</mx:Box>